name: "CI"

on:
  push:
    branches:
        - master
        - CI_testing
  pull_request:
    branches:
        - master

jobs:
  macOS:
    name: "macOS (ARM, latest)"

    runs-on: macos-latest
    steps:
      - name: Install dependencies
        run: |
          # Use a strict shell, stop the interpreter on various errors,
          # so errors such as undefined variables are caught by CI/CD
          # instead of ignored. Use printf because it contains options,
          # which can be difficult to escape.
          printf "%s\n" "set -euo pipefail" >> ~/.zprofile

          # For #!/bin/bash scripts.
          # To ensure ~/.bash_env is executed, BASH_ENV must be set for the
          # current default shell of which bash is launched from.
          # Use a special ~/.bash_env file because ~/.bash_profile
          # may contain commands that reset environment variables
          # such as PATH.
          printf "%s\n" "set -euo pipefail" >> ~/.bash_env
          echo 'export BASH_ENV="$HOME/.bash_env"' >> ~/.zprofile

          # GitHub's default ~/.bash_profile contains:
          #
          #     POWERSHELL_DISTRIBUTION_CHANNEL=GitHub-Actions-macos15
          #
          # WITHOUT ending with "\n". Add a "\n" manually, otherwise
          # the command is invalid.
          printf "\n%s\n" "set -euo pipefail" >> ~/.bash_profile

          brew install cmake boost hdf5 cgal vtk python3 octave

          # cython is keg-only, which means it was not symlinked into /opt/homebrew,
          # because this formula is mainly used internally by other formulae.
          # Users are advised to use `pip` to install cython.
          #
          # So Python will NOT be able to find cython from "site-package", nor
          # will the shell finds a cython executable from "bin"
          #
          # But then, `pip` can't be used directly due to PEP 668, which asks us
          # to install cython via the system's package manager, buh Howebrew does
          # not provide a fully-function package (unless you hack the symlinks
          # manually).
          #
          # So, the real solution is creating a virtualenv specifically for openEMS
          # usage.
          python3 -m venv $HOME/opt
          $HOME/opt/bin/pip3 install setuptools cython numpy h5py matplotlib

      - name: Checkout openEMS.git
        uses: actions/checkout@v4
        with:
          path: openEMS-Project
          submodules: recursive

          # checkout must be deep, not shallow.
          # We need tags for "git describe", otherwise build fails.
          fetch-depth: 0

      - name: Build and install openEMS
        run: |
          source ~/.zprofile
          cd $GITHUB_WORKSPACE/openEMS-Project

          # needed by Python modules
          source $HOME/opt/bin/activate  # activate venv

          if ./update_openEMS.sh ~/opt --python; then
            cat build_*.log
          else
            cat build_*.log
            exit 1
          fi

          echo "addpath('~/opt/share/openEMS/matlab')" >> ~/.octaverc
          echo "addpath('~/opt/share/CSXCAD/matlab')" >> ~/.octaverc

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-openems
          path: $GITHUB_WORKSPACE/**/*

      - name: Smoketest Octave execution
        run: |
          cd $GITHUB_WORKSPACE/openEMS-Project/openEMS/.github/smoketests/octave
          octave MSL_NotchFilter.m

      - name: Smoketest Python execution
        run: |
          cd $GITHUB_WORKSPACE/openEMS-Project/openEMS/.github/smoketests/python
          $HOME/opt/bin/python3 MSL_NotchFilter.py
